{
    "solver.ResidualMemory.peakmem_smoothing": {
        "code": "class ResidualMemory:\n    def peakmem_smoothing(self, size):\n        solver.residual(\n                grid=self.grid,\n                model=self.model,\n                sfield=self.sfield,\n                efield=self.sfield*0)\n\n    def setup(self, size):\n        self.grid, self.model, self.sfield = get_model(size)",
        "name": "solver.ResidualMemory.peakmem_smoothing",
        "param_names": [
            "size"
        ],
        "params": [
            [
                "'small'",
                "'big'"
            ]
        ],
        "timeout": 60.0,
        "type": "peakmemory",
        "unit": "bytes",
        "version": "eae9dd179edd7f44d63f6e86f327c5d76e21bba96edacaf5a28ce5e9055a8c42"
    },
    "solver.ResidualTime.time_smoothing": {
        "code": "class ResidualTime:\n    def time_smoothing(self, size):\n        solver.residual(\n                grid=self.grid,\n                model=self.model,\n                sfield=self.sfield,\n                efield=self.sfield*0)\n\n    def setup(self, size):\n        self.grid, self.model, self.sfield = get_model(size)",
        "min_run_count": 2,
        "name": "solver.ResidualTime.time_smoothing",
        "number": 0,
        "param_names": [
            "size"
        ],
        "params": [
            [
                "'small'",
                "'big'"
            ]
        ],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "0f442041c850176881c31a3df053ae03c732b2a410c43ef5b85c985662dfd303",
        "warmup_time": -1
    },
    "solver.SmoothingMemory.peakmem_smoothing": {
        "code": "class SmoothingMemory:\n    def peakmem_smoothing(self, ldir, size):\n        solver.smoothing(\n                grid=self.grid,\n                model=self.model,\n                sfield=self.sfield,\n                efield=self.sfield*0,\n                nu=2,\n                ldir=ldir)\n\n    def setup(self, ldir, size):\n        self.grid, self.model, self.sfield = get_model(size)",
        "name": "solver.SmoothingMemory.peakmem_smoothing",
        "param_names": [
            "ldir",
            "size"
        ],
        "params": [
            [
                "0",
                "1",
                "2",
                "3"
            ],
            [
                "'small'",
                "'big'"
            ]
        ],
        "timeout": 60.0,
        "type": "peakmemory",
        "unit": "bytes",
        "version": "c907f3e4abcd10b495fbe341f52e4d57d81f63037bc5ae65f0e877a73ff38758"
    },
    "solver.SmoothingTime.time_smoothing": {
        "code": "class SmoothingTime:\n    def time_smoothing(self, ldir, size):\n        solver.smoothing(\n                grid=self.grid,\n                model=self.model,\n                sfield=self.sfield,\n                efield=self.sfield*0,\n                nu=2,\n                ldir=ldir)\n\n    def setup(self, ldir, size):\n        self.grid, self.model, self.sfield = get_model(size)",
        "min_run_count": 2,
        "name": "solver.SmoothingTime.time_smoothing",
        "number": 0,
        "param_names": [
            "ldir",
            "size"
        ],
        "params": [
            [
                "0",
                "1",
                "2",
                "3"
            ],
            [
                "'small'",
                "'big'"
            ]
        ],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "a03b4efa772093d39a6d41c7e4f96ebd302644ea2fbab6be916f12cc485c0f0c",
        "warmup_time": -1
    },
    "solver.SolverMemory.peakmem_solver": {
        "code": "class SolverMemory:\n    def peakmem_solver(self, sslsolver, anisotropy):\n        solver.solver(\n                grid=self.grid,\n                model=self.model,\n                sfield=self.sfield,\n                cycle='F',\n                sslsolver=sslsolver,\n                semicoarsening=True,\n                linerelaxation=True,\n                verb=VERB)\n\n    def setup(self, sslsolver, anisotropy):\n        self.grid, self.model, self.sfield = get_model('small', anisotropy)",
        "name": "solver.SolverMemory.peakmem_solver",
        "param_names": [
            "sslsolver",
            "anisotropy"
        ],
        "params": [
            [
                "True",
                "False"
            ],
            [
                "'iso'",
                "'vti'",
                "'tri'"
            ]
        ],
        "timeout": 60.0,
        "type": "peakmemory",
        "unit": "bytes",
        "version": "74fdf43a3648f62eeb630e8c4c3d84f7868c8b5de5121660a66ce322018beb3d"
    },
    "solver.SolverTimeCycle.time_solver": {
        "code": "class SolverTimeCycle:\n    def time_solver(self, cycle):\n        solver.solver(\n                grid=self.grid,\n                model=self.model,\n                sfield=self.sfield,\n                cycle=cycle,\n                sslsolver=False,\n                semicoarsening=True,\n                linerelaxation=True,\n                verb=VERB)\n\n    def setup(self, cycle):\n        self.grid, self.model, self.sfield = get_model('small')",
        "min_run_count": 2,
        "name": "solver.SolverTimeCycle.time_solver",
        "number": 0,
        "param_names": [
            "cycle"
        ],
        "params": [
            [
                "'V'",
                "'W'",
                "'F'"
            ]
        ],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "a4e7bd69b772ccb09b72c5a600b351e560079ee36c0167cddd8e23a0f0d6836a",
        "warmup_time": -1
    },
    "solver.SolverTimeMG.time_solver": {
        "code": "class SolverTimeMG:\n    def time_solver(self, semicoarsening, linerelaxation):\n        solver.solver(\n                grid=self.grid,\n                model=self.model,\n                sfield=self.sfield,\n                cycle='F',\n                sslsolver=False,\n                semicoarsening=semicoarsening,\n                linerelaxation=linerelaxation,\n                verb=VERB)\n\n    def setup(self, semicoarsening, linerelaxation):\n        self.grid, self.model, self.sfield = get_model('small')",
        "min_run_count": 2,
        "name": "solver.SolverTimeMG.time_solver",
        "number": 0,
        "param_names": [
            "semicoarsening",
            "linerelaxation"
        ],
        "params": [
            [
                "True",
                "False"
            ],
            [
                "True",
                "False"
            ]
        ],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "06abe37973c976126ab365deb92dcfb0e9bf8b20d3ee1e391b5e93446f0cb01e",
        "warmup_time": -1
    },
    "solver.SolverTimeSSL.time_solver": {
        "code": "class SolverTimeSSL:\n    def time_solver(self, sslsolver):\n        solver.solver(\n                grid=self.grid,\n                model=self.model,\n                sfield=self.sfield,\n                cycle='F',\n                sslsolver=sslsolver,\n                semicoarsening=True,\n                linerelaxation=True,\n                verb=VERB)\n\n    def setup(self, sslsolver):\n        self.grid, self.model, self.sfield = get_model('small')",
        "min_run_count": 2,
        "name": "solver.SolverTimeSSL.time_solver",
        "number": 0,
        "param_names": [
            "sslsolver"
        ],
        "params": [
            [
                "True",
                "False"
            ]
        ],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "79dac8b98ddf321a448c48562641a2f07c652de91f31cab9f067ebae6784f5e6",
        "warmup_time": -1
    },
    "version": 2
}