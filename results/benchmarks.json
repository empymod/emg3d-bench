{
    "memory.ResidualMemory.peakmem_residual": {
        "code": "class ResidualMemory:\n    def peakmem_residual(self, data, size):\n        grid = data[size]['grid']\n        model = data[size]['model']\n        sfield = utils.Field(grid, data[size]['sfield'])\n        if BEFORE:\n            res = solver.residual(grid, model, sfield, sfield.field*0)\n            norm = np.linalg.norm(res)\n        else:  # After, norm is included in residual.\n            res, norm = solver.residual(grid, model, sfield, sfield.field*0)\n\n    def setup_cache(self):\n        data = {}\n        for size in self.params[0]:\n            data[size] = {}\n            grid, model, sfield = get_model(size)\n            data[size]['grid'] = grid\n            data[size]['model'] = model\n            data[size]['sfield'] = sfield\n        return data",
        "name": "memory.ResidualMemory.peakmem_residual",
        "param_names": [
            "size"
        ],
        "params": [
            [
                "'small'",
                "'big'"
            ]
        ],
        "setup_cache_key": "/home/dtr/Codes/emg3d-asv/benchmarks/memory.py:146",
        "timeout": 60.0,
        "type": "peakmemory",
        "unit": "bytes",
        "version": "b693cc6d404bd417bf27fd2b73cb5468ce2f311a90e9dfaa43d0b92157802431"
    },
    "memory.SmoothingMemory.peakmem_smoothing": {
        "code": "class SmoothingMemory:\n    def peakmem_smoothing(self, data, lr_dir, size):\n        grid = data[size]['grid']\n        model = data[size]['model']\n        sfield = utils.Field(grid, data[size]['sfield'])\n        efield = utils.Field(grid)\n        inp = (grid, model, sfield, efield, 2, lr_dir)\n        if BEFORE:\n            solver.smoothing(*inp)\n            res = solver.residual(grid, model, sfield, efield)\n            norm = np.linalg.norm(res)\n        else:  # After, residual is included in smoothing and norm in residual.\n            res, norm = solver.smoothing(*inp)\n\n    def setup_cache(self):\n        data = {}\n        for size in self.params[1]:\n            data[size] = {}\n            grid, model, sfield = get_model(size)\n            data[size]['grid'] = grid\n            data[size]['model'] = model\n            data[size]['sfield'] = sfield\n        return data",
        "name": "memory.SmoothingMemory.peakmem_smoothing",
        "param_names": [
            "lr_dir",
            "size"
        ],
        "params": [
            [
                "0",
                "1",
                "2",
                "3"
            ],
            [
                "'small'",
                "'big'"
            ]
        ],
        "setup_cache_key": "/home/dtr/Codes/emg3d-asv/benchmarks/memory.py:117",
        "timeout": 60.0,
        "type": "peakmemory",
        "unit": "bytes",
        "version": "a7546b6d4726bbaec3065b1dc73fbb9592f470ba8bef377a251167e3293ccfb2"
    },
    "memory.SolverMemory.peakmem_solver": {
        "code": "class SolverMemory:\n    def peakmem_solver(self, data, sslsolver, anisotropy):\n        grid = data[anisotropy]['grid']\n        model = data[anisotropy]['model']\n        sfield = utils.Field(grid, data[anisotropy]['sfield'])\n        solver.solver(\n                grid=grid,\n                model=model,\n                sfield=sfield,\n                cycle='F',\n                sslsolver=sslsolver,\n                semicoarsening=True,\n                linerelaxation=True,\n                verb=VERB)\n\n    def setup_cache(self):\n        data = {}\n        for anisotropy in self.params[1]:\n            data[anisotropy] = {}\n            grid, model, sfield = get_model('small', anisotropy)\n            data[anisotropy]['grid'] = grid\n            data[anisotropy]['model'] = model\n            data[anisotropy]['sfield'] = sfield\n        return data",
        "name": "memory.SolverMemory.peakmem_solver",
        "param_names": [
            "sslsolver",
            "anisotropy"
        ],
        "params": [
            [
                "True",
                "False"
            ],
            [
                "'iso'",
                "'vti'",
                "'tri'"
            ]
        ],
        "setup_cache_key": "/home/dtr/Codes/emg3d-asv/benchmarks/memory.py:82",
        "timeout": 60.0,
        "type": "peakmemory",
        "unit": "bytes",
        "version": "d8f255b3bceb0a8a71ea40f041c9a25e3b44b5fef30e25ffda555d2bcfe0b168"
    },
    "time.ResidualTime.time_residual": {
        "code": "class ResidualTime:\n    def time_residual(self, data, size):\n        grid = data[size]['grid']\n        model = data[size]['model']\n        sfield = utils.Field(grid, data[size]['sfield'])\n        if BEFORE:\n            res = solver.residual(grid, model, sfield, sfield.field*0)\n            norm = np.linalg.norm(res)\n        else:  # After, norm is included in residual.\n            res, norm = solver.residual(grid, model, sfield, sfield.field*0)\n\n    def setup_cache(self):\n        data = {}\n        for size in self.params[0]:\n            data[size] = {}\n            grid, model, sfield = get_model(size)\n            data[size]['grid'] = grid\n            data[size]['model'] = model\n            data[size]['sfield'] = sfield\n        return data",
        "min_run_count": 2,
        "name": "time.ResidualTime.time_residual",
        "number": 0,
        "param_names": [
            "size"
        ],
        "params": [
            [
                "'small'",
                "'big'"
            ]
        ],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "setup_cache_key": "/home/dtr/Codes/emg3d-asv/benchmarks/time.py:211",
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "0d6b6a0bdc443480b9445059a4bc02c67173385fe1e5eb79aab321bdc411c6a4",
        "warmup_time": -1
    },
    "time.SmoothingTime.time_smoothing": {
        "code": "class SmoothingTime:\n    def time_smoothing(self, data, lr_dir, size):\n        grid = data[size]['grid']\n        model = data[size]['model']\n        sfield = utils.Field(grid, data[size]['sfield'])\n        efield = utils.Field(grid)\n        inp = (grid, model, sfield, efield, 2, lr_dir)\n        if BEFORE:\n            solver.smoothing(*inp)\n            res = solver.residual(grid, model, sfield, efield)\n            norm = np.linalg.norm(res)\n        else:  # After, residual is included in smoothing and norm in residual.\n            res, norm = solver.smoothing(*inp)\n\n    def setup_cache(self):\n        data = {}\n        for size in self.params[1]:\n            data[size] = {}\n            grid, model, sfield = get_model(size)\n            data[size]['grid'] = grid\n            data[size]['model'] = model\n            data[size]['sfield'] = sfield\n        return data",
        "min_run_count": 2,
        "name": "time.SmoothingTime.time_smoothing",
        "number": 0,
        "param_names": [
            "lr_dir",
            "size"
        ],
        "params": [
            [
                "0",
                "1",
                "2",
                "3"
            ],
            [
                "'small'",
                "'big'"
            ]
        ],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "setup_cache_key": "/home/dtr/Codes/emg3d-asv/benchmarks/time.py:182",
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "e96bf957142df5948f4eb671211b1682e45c858580ef958c3886c181cc745607",
        "warmup_time": -1
    },
    "time.SolverTimeCycle.time_solver": {
        "code": "class SolverTimeCycle:\n    def time_solver(self, data, cycle):\n        grid = data['grid']\n        model = data['model']\n        sfield = utils.Field(grid, data['sfield'])\n        solver.solver(\n                grid=grid,\n                model=model,\n                sfield=sfield,\n                cycle=cycle,\n                sslsolver=False,\n                semicoarsening=True,\n                linerelaxation=True,\n                verb=VERB)\n\n    def setup_cache(self):\n        data = {}\n        grid, model, sfield = get_model('small')\n        data['grid'] = grid\n        data['model'] = model\n        data['sfield'] = sfield\n        return data",
        "min_run_count": 2,
        "name": "time.SolverTimeCycle.time_solver",
        "number": 0,
        "param_names": [
            "cycle"
        ],
        "params": [
            [
                "'V'",
                "'W'",
                "'F'"
            ]
        ],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "setup_cache_key": "/home/dtr/Codes/emg3d-asv/benchmarks/time.py:149",
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "a9c880bbe599d4f94697fcbfff6f3193b4da1ab3b2d05f3d4e5feae61ddce2b6",
        "warmup_time": -1
    },
    "time.SolverTimeMG.time_solver": {
        "code": "class SolverTimeMG:\n    def time_solver(self, data, semicoarsening, linerelaxation):\n        grid = data['grid']\n        model = data['model']\n        sfield = utils.Field(grid, data['sfield'])\n        solver.solver(\n                grid=grid,\n                model=model,\n                sfield=sfield,\n                cycle='F',\n                sslsolver=False,\n                semicoarsening=semicoarsening,\n                linerelaxation=linerelaxation,\n                verb=VERB)\n\n    def setup_cache(self):\n        data = {}\n        grid, model, sfield = get_model('small')\n        data['grid'] = grid\n        data['model'] = model\n        data['sfield'] = sfield\n        return data",
        "min_run_count": 2,
        "name": "time.SolverTimeMG.time_solver",
        "number": 0,
        "param_names": [
            "semicoarsening",
            "linerelaxation"
        ],
        "params": [
            [
                "True",
                "False"
            ],
            [
                "True",
                "False"
            ]
        ],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "setup_cache_key": "/home/dtr/Codes/emg3d-asv/benchmarks/time.py:116",
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "0f36c1d6ae03b1a44a40b23d61d7ffa5b7cc54bfd64eeb5494c9ac375bae3f7f",
        "warmup_time": -1
    },
    "time.SolverTimeSSL.time_solver": {
        "code": "class SolverTimeSSL:\n    def time_solver(self, data, sslsolver):\n        grid = data['grid']\n        model = data['model']\n        sfield = utils.Field(grid, data['sfield'])\n        solver.solver(\n                grid=grid,\n                model=model,\n                sfield=sfield,\n                cycle='F',\n                sslsolver=sslsolver,\n                semicoarsening=True,\n                linerelaxation=True,\n                verb=VERB)\n\n    def setup_cache(self):\n        data = {}\n        grid, model, sfield = get_model('small')\n        data['grid'] = grid\n        data['model'] = model\n        data['sfield'] = sfield\n        return data",
        "min_run_count": 2,
        "name": "time.SolverTimeSSL.time_solver",
        "number": 0,
        "param_names": [
            "sslsolver"
        ],
        "params": [
            [
                "True",
                "False"
            ]
        ],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "setup_cache_key": "/home/dtr/Codes/emg3d-asv/benchmarks/time.py:82",
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "5b933ce2c5eb9765f95b73591ccf0b52134c557d57ae85a68101f067ee34deae",
        "warmup_time": -1
    },
    "version": 2
}