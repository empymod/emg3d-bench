{
    "memory.ResidualMemory.peakmem_residual": {
        "code": "class ResidualMemory:\n    def peakmem_residual(self, data, size):\n        grid = data[size]['grid']\n        model = data[size]['model']\n        sfield = utils.Field(grid, data[size]['sfield'])\n        if BEFORE:\n            res = solver.residual(grid, model, sfield, sfield.field*0)\n            norm = np.linalg.norm(res)\n        else:  # After, norm is included in residual.\n            res, norm = solver.residual(grid, model, sfield, sfield.field*0)\n\n    def setup_cache(self):\n        data = {}\n        for size in self.params[0]:\n            data[size] = {}\n            grid, model, sfield = get_model(size)\n            data[size]['grid'] = grid\n            data[size]['sfield'] = sfield\n            try:  # Needs VolumeModel from d8e98c0 onwards.\n                data[size]['model'] = utils.VolumeModel(grid, model, sfield)\n            except AttributeError:\n                data[size]['model'] = model\n        return data",
        "name": "memory.ResidualMemory.peakmem_residual",
        "param_names": [
            "size"
        ],
        "params": [
            [
                "'small'",
                "'big'"
            ]
        ],
        "setup_cache_key": "/home/dtr/Codes/emg3d-asv/benchmarks/memory.py:158",
        "timeout": 60.0,
        "type": "peakmemory",
        "unit": "bytes",
        "version": "e2274e14e498509f7245331c493f458523362edf067130589d46cb830a5c3d49"
    },
    "memory.SmoothingMemory.peakmem_smoothing": {
        "code": "class SmoothingMemory:\n    def peakmem_smoothing(self, data, lr_dir, size):\n        grid = data[size]['grid']\n        model = data[size]['model']\n        sfield = utils.Field(grid, data[size]['sfield'])\n        efield = utils.Field(grid)\n        inp = (grid, model, sfield, efield, 2, lr_dir)\n        if BEFORE:\n            solver.smoothing(*inp)\n            res = solver.residual(grid, model, sfield, efield)\n            norm = np.linalg.norm(res)\n        else:  # After, residual is included in smoothing and norm in residual.\n            res, norm = solver.smoothing(*inp)\n\n    def setup_cache(self):\n        data = {}\n        for size in self.params[1]:\n            data[size] = {}\n            grid, model, sfield = get_model(size)\n            data[size]['grid'] = grid\n            data[size]['sfield'] = sfield\n            try:  # Needs VolumeModel from d8e98c0 onwards.\n                data[size]['model'] = utils.VolumeModel(grid, model, sfield)\n            except AttributeError:\n                data[size]['model'] = model\n        return data",
        "name": "memory.SmoothingMemory.peakmem_smoothing",
        "param_names": [
            "lr_dir",
            "size"
        ],
        "params": [
            [
                "0",
                "1",
                "2",
                "3"
            ],
            [
                "'small'",
                "'big'"
            ]
        ],
        "setup_cache_key": "/home/dtr/Codes/emg3d-asv/benchmarks/memory.py:126",
        "timeout": 60.0,
        "type": "peakmemory",
        "unit": "bytes",
        "version": "fec2b6f9600f4af7771e124cab8402d346d9a10eac570833524186b64bd9df4a"
    },
    "memory.SolverMemory.peakmem_solver": {
        "code": "class SolverMemory:\n    def peakmem_solver(self, data, sslsolver, anisotropy):\n        grid = data[anisotropy]['grid']\n        model = data[anisotropy]['model']\n        sfield = utils.Field(grid, data[anisotropy]['sfield'])\n        solve(grid=grid,\n              model=model,\n              sfield=sfield,\n              cycle='F',\n              sslsolver=sslsolver,\n              semicoarsening=True,\n              linerelaxation=True,\n              verb=VERB)\n\n    def setup_cache(self):\n        data = {}\n        for anisotropy in self.params[1]:\n            data[anisotropy] = {}\n            grid, model, sfield = get_model('small', anisotropy)\n            data[anisotropy]['grid'] = grid\n            data[anisotropy]['model'] = model\n            data[anisotropy]['sfield'] = sfield\n        return data",
        "name": "memory.SolverMemory.peakmem_solver",
        "param_names": [
            "sslsolver",
            "anisotropy"
        ],
        "params": [
            [
                "True",
                "False"
            ],
            [
                "'iso'",
                "'vti'",
                "'tri'"
            ]
        ],
        "setup_cache_key": "/home/dtr/Codes/emg3d-asv/benchmarks/memory.py:92",
        "timeout": 60.0,
        "type": "peakmemory",
        "unit": "bytes",
        "version": "9b78f85f55f2bd3c1c604175199a0979516d00e9a165b1659cf8cd98b38f8759"
    },
    "time.ResidualTime.time_residual": {
        "code": "class ResidualTime:\n    def time_residual(self, data, size):\n        grid = data[size]['grid']\n        model = data[size]['model']\n        sfield = utils.Field(grid, data[size]['sfield'])\n        if BEFORE:\n            res = solver.residual(grid, model, sfield, sfield.field*0)\n            norm = np.linalg.norm(res)\n        else:  # After, norm is included in residual.\n            res, norm = solver.residual(grid, model, sfield, sfield.field*0)\n\n    def setup_cache(self):\n        data = {}\n        for size in self.params[0]:\n            data[size] = {}\n            grid, model, sfield = get_model(size)\n            data[size]['grid'] = grid\n            data[size]['sfield'] = sfield\n            try:  # Needs VolumeModel from d8e98c0 onwards.\n                data[size]['model'] = utils.VolumeModel(grid, model, sfield)\n            except AttributeError:\n                data[size]['model'] = model\n    \n        return data",
        "min_run_count": 2,
        "name": "time.ResidualTime.time_residual",
        "number": 0,
        "param_names": [
            "size"
        ],
        "params": [
            [
                "'small'",
                "'big'"
            ]
        ],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "setup_cache_key": "/home/dtr/Codes/emg3d-asv/benchmarks/time.py:221",
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "ef8926db276cc98e56a985bdc4bf9eb11f6c535693591c49271574670e2113c5",
        "warmup_time": -1
    },
    "time.SmoothingTime.time_smoothing": {
        "code": "class SmoothingTime:\n    def time_smoothing(self, data, lr_dir, size):\n        grid = data[size]['grid']\n        model = data[size]['model']\n        sfield = utils.Field(grid, data[size]['sfield'])\n        efield = utils.Field(grid)\n        inp = (grid, model, sfield, efield, 2, lr_dir)\n        if BEFORE:\n            solver.smoothing(*inp)\n            res = solver.residual(grid, model, sfield, efield)\n            norm = np.linalg.norm(res)\n        else:  # After, residual is included in smoothing and norm in residual.\n            res, norm = solver.smoothing(*inp)\n\n    def setup_cache(self):\n        data = {}\n        for size in self.params[1]:\n            data[size] = {}\n            grid, model, sfield = get_model(size)\n            data[size]['grid'] = grid\n            data[size]['sfield'] = sfield\n            try:  # Needs VolumeModel from d8e98c0 onwards.\n                data[size]['model'] = utils.VolumeModel(grid, model, sfield)\n            except AttributeError:\n                data[size]['model'] = model\n        return data",
        "min_run_count": 2,
        "name": "time.SmoothingTime.time_smoothing",
        "number": 0,
        "param_names": [
            "lr_dir",
            "size"
        ],
        "params": [
            [
                "0",
                "1",
                "2",
                "3"
            ],
            [
                "'small'",
                "'big'"
            ]
        ],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "setup_cache_key": "/home/dtr/Codes/emg3d-asv/benchmarks/time.py:189",
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "1c94b43ea2afc94cb7940993dc45f809bdeec653d652d3ecc9dbf17bf1b6238e",
        "warmup_time": -1
    },
    "time.SolverTimeCycle.time_solver": {
        "code": "class SolverTimeCycle:\n    def time_solver(self, data, cycle):\n        grid = data['grid']\n        model = data['model']\n        sfield = utils.Field(grid, data['sfield'])\n        solve(grid=grid,\n              model=model,\n              sfield=sfield,\n              cycle=cycle,\n              sslsolver=False,\n              semicoarsening=True,\n              linerelaxation=True,\n              verb=VERB)\n\n    def setup_cache(self):\n        data = {}\n        grid, model, sfield = get_model('small')\n        data['grid'] = grid\n        data['model'] = model\n        data['sfield'] = sfield\n        return data",
        "min_run_count": 2,
        "name": "time.SolverTimeCycle.time_solver",
        "number": 0,
        "param_names": [
            "cycle"
        ],
        "params": [
            [
                "'V'",
                "'W'",
                "'F'"
            ]
        ],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "setup_cache_key": "/home/dtr/Codes/emg3d-asv/benchmarks/time.py:157",
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "d3426dd1e7519fe92c1794ede7ce43303f55ec68c2347ee00847ac33505467e9",
        "warmup_time": -1
    },
    "time.SolverTimeMG.time_solver": {
        "code": "class SolverTimeMG:\n    def time_solver(self, data, semicoarsening, linerelaxation):\n        grid = data['grid']\n        model = data['model']\n        sfield = utils.Field(grid, data['sfield'])\n        solve(grid=grid,\n              model=model,\n              sfield=sfield,\n              cycle='F',\n              sslsolver=False,\n              semicoarsening=semicoarsening,\n              linerelaxation=linerelaxation,\n              verb=VERB)\n\n    def setup_cache(self):\n        data = {}\n        grid, model, sfield = get_model('small')\n        data['grid'] = grid\n        data['model'] = model\n        data['sfield'] = sfield\n        return data",
        "min_run_count": 2,
        "name": "time.SolverTimeMG.time_solver",
        "number": 0,
        "param_names": [
            "semicoarsening",
            "linerelaxation"
        ],
        "params": [
            [
                "True",
                "False"
            ],
            [
                "True",
                "False"
            ]
        ],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "setup_cache_key": "/home/dtr/Codes/emg3d-asv/benchmarks/time.py:125",
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "525e9ab309c2fc1b081df4af133ce4eb0c41309323ebff8232c8d4d74d23b6ed",
        "warmup_time": -1
    },
    "time.SolverTimeSSL.time_solver": {
        "code": "class SolverTimeSSL:\n    def time_solver(self, data, sslsolver):\n        grid = data['grid']\n        model = data['model']\n        sfield = utils.Field(grid, data['sfield'])\n        solve(grid=grid,\n              model=model,\n              sfield=sfield,\n              cycle='F',\n              sslsolver=sslsolver,\n              semicoarsening=True,\n              linerelaxation=True,\n              verb=VERB)\n\n    def setup_cache(self):\n        data = {}\n        grid, model, sfield = get_model('small')\n        data['grid'] = grid\n        data['model'] = model\n        data['sfield'] = sfield\n        return data",
        "min_run_count": 2,
        "name": "time.SolverTimeSSL.time_solver",
        "number": 0,
        "param_names": [
            "sslsolver"
        ],
        "params": [
            [
                "True",
                "False"
            ]
        ],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "setup_cache_key": "/home/dtr/Codes/emg3d-asv/benchmarks/time.py:92",
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "94e5a0bca73b22044ceddaa75bd7b3ed54dd3bd207f18fe710719431099b9e07",
        "warmup_time": -1
    },
    "version": 2
}