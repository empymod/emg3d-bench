{
    "memory.ResidualMemory.peakmem_residual": {
        "code": "class ResidualMemory:\n    def peakmem_residual(self, data, size):\n        grid = data[size]['grid']\n        model = data[size]['model']\n        sfield = Field(grid, data[size]['sfield'])\n        _ = emg3d.solver.residual(grid, model, sfield, sfield.field*0)\n\n    def setup_cache(self):\n        data = {}\n        for size in self.params[0]:\n            data[size] = {}\n            grid, model, sfield = get_model(size)\n            data[size]['grid'] = grid\n            data[size]['sfield'] = sfield\n            # Needs VolumeModel from 0.9.1dev4 / d8e98c0 onwards.\n            if INFO < (0, 9, 1, 4):\n                data[size]['model'] = model\n            else:\n                data[size]['model'] = VolumeModel(grid, model, sfield)\n        return data",
        "name": "memory.ResidualMemory.peakmem_residual",
        "param_names": [
            "size"
        ],
        "params": [
            [
                "'small'",
                "'big'"
            ]
        ],
        "setup_cache_key": "/home/dtr/Codes/emg3d-asv/benchmarks/memory.py:174",
        "timeout": 60.0,
        "type": "peakmemory",
        "unit": "bytes",
        "version": "53223a539c5dc54da5e3e19bc7758a89fa00bf60531f6c36c77e464f28b21cee"
    },
    "memory.SmoothingMemory.peakmem_smoothing": {
        "code": "class SmoothingMemory:\n    def peakmem_smoothing(self, data, lr_dir, size):\n        grid = data[size]['grid']\n        model = data[size]['model']\n        sfield = Field(grid, data[size]['sfield'])\n        efield = Field(grid)\n        inp = (grid, model, sfield, efield, 2, lr_dir)\n        emg3d.solver.smoothing(*inp)\n        _ = emg3d.solver.residual(grid, model, sfield, efield)\n\n    def setup_cache(self):\n        data = {}\n        for size in self.params[1]:\n            data[size] = {}\n            grid, model, sfield = get_model(size)\n            data[size]['grid'] = grid\n            data[size]['sfield'] = sfield\n            # Needs VolumeModel from 0.9.1dev4 / d8e98c0 onwards.\n            if INFO < (0, 9, 1, 4):\n                data[size]['model'] = model\n            else:\n                data[size]['model'] = VolumeModel(grid, model, sfield)\n        return data",
        "name": "memory.SmoothingMemory.peakmem_smoothing",
        "param_names": [
            "lr_dir",
            "size"
        ],
        "params": [
            [
                "0",
                "1",
                "2",
                "3"
            ],
            [
                "'small'",
                "'big'"
            ]
        ],
        "setup_cache_key": "/home/dtr/Codes/emg3d-asv/benchmarks/memory.py:145",
        "timeout": 60.0,
        "type": "peakmemory",
        "unit": "bytes",
        "version": "1cb7c6a7da5a5307ae06173d71c61941ef6ced22ed778ca314f3aa56f508f4f2"
    },
    "memory.SolverMemory.peakmem_solver": {
        "code": "class SolverMemory:\n    def peakmem_solver(self, data, sslsolver, anisotropy):\n        grid = data[anisotropy]['grid']\n        model = data[anisotropy]['model']\n        sfield = Field(grid, data[anisotropy]['sfield'])\n        solve(grid=grid,\n              model=model,\n              sfield=sfield,\n              cycle='F',\n              sslsolver=sslsolver,\n              semicoarsening=True,\n              linerelaxation=True,\n              verb=VERB)\n\n    def setup_cache(self):\n        data = {}\n        for anisotropy in self.params[1]:\n            data[anisotropy] = {}\n            grid, model, sfield = get_model('small', anisotropy)\n            data[anisotropy]['grid'] = grid\n            data[anisotropy]['model'] = model\n            data[anisotropy]['sfield'] = sfield\n        return data",
        "name": "memory.SolverMemory.peakmem_solver",
        "param_names": [
            "sslsolver",
            "anisotropy"
        ],
        "params": [
            [
                "True",
                "False"
            ],
            [
                "'iso'",
                "'vti'",
                "'tri'"
            ]
        ],
        "setup_cache_key": "/home/dtr/Codes/emg3d-asv/benchmarks/memory.py:111",
        "timeout": 60.0,
        "type": "peakmemory",
        "unit": "bytes",
        "version": "827818e5d11e670fde68ce2764c9ba847b236b05f37bbdaede10cab3522f45ad"
    },
    "time.ResidualTime.time_residual": {
        "code": "class ResidualTime:\n    def time_residual(self, data, size):\n        grid = data[size]['grid']\n        model = data[size]['model']\n        sfield = Field(grid, data[size]['sfield'])\n        _ = emg3d.solver.residual(grid, model, sfield, sfield.field*0)\n\n    def setup_cache(self):\n        data = {}\n        for size in self.params[0]:\n            data[size] = {}\n            grid, model, sfield = get_model(size)\n            data[size]['grid'] = grid\n            data[size]['sfield'] = sfield\n            # Needs VolumeModel from 0.9.1dev4 / d8e98c0 onwards.\n            if INFO < (0, 9, 1, 4):\n                data[size]['model'] = model\n            else:\n                data[size]['model'] = VolumeModel(grid, model, sfield)\n        return data",
        "min_run_count": 2,
        "name": "time.ResidualTime.time_residual",
        "number": 0,
        "param_names": [
            "size"
        ],
        "params": [
            [
                "'small'",
                "'big'"
            ]
        ],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "setup_cache_key": "/home/dtr/Codes/emg3d-asv/benchmarks/time.py:236",
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "a2501ac6c2d831aac4fdbd5c5d0402d3fe919d0efeca6dd7df4353c2f93bcbc1",
        "warmup_time": -1
    },
    "time.SmoothingTime.time_smoothing": {
        "code": "class SmoothingTime:\n    def time_smoothing(self, data, lr_dir, size):\n        grid = data[size]['grid']\n        model = data[size]['model']\n        sfield = Field(grid, data[size]['sfield'])\n        efield = Field(grid)\n        inp = (grid, model, sfield, efield, 2, lr_dir)\n        emg3d.solver.smoothing(*inp)\n        _ = emg3d.solver.residual(grid, model, sfield, efield)\n\n    def setup_cache(self):\n        data = {}\n        for size in self.params[1]:\n            data[size] = {}\n            grid, model, sfield = get_model(size)\n            data[size]['grid'] = grid\n            data[size]['sfield'] = sfield\n            # Needs VolumeModel from 0.9.1dev4 / d8e98c0 onwards.\n            if INFO < (0, 9, 1, 4):\n                data[size]['model'] = model\n            else:\n                data[size]['model'] = VolumeModel(grid, model, sfield)\n        return data",
        "min_run_count": 2,
        "name": "time.SmoothingTime.time_smoothing",
        "number": 0,
        "param_names": [
            "lr_dir",
            "size"
        ],
        "params": [
            [
                "0",
                "1",
                "2",
                "3"
            ],
            [
                "'small'",
                "'big'"
            ]
        ],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "setup_cache_key": "/home/dtr/Codes/emg3d-asv/benchmarks/time.py:207",
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "745ccdadf725777f34486e31376d778fa69370bce01b74ec15c9f41428a04bbc",
        "warmup_time": -1
    },
    "time.SolverTimeCycle.time_solver": {
        "code": "class SolverTimeCycle:\n    def time_solver(self, data, cycle):\n        grid = data['grid']\n        model = data['model']\n        sfield = Field(grid, data['sfield'])\n        solve(grid=grid,\n              model=model,\n              sfield=sfield,\n              cycle=cycle,\n              sslsolver=False,\n              semicoarsening=True,\n              linerelaxation=True,\n              verb=VERB)\n\n    def setup_cache(self):\n        data = {}\n        grid, model, sfield = get_model('small')\n        data['grid'] = grid\n        data['model'] = model\n        data['sfield'] = sfield\n        return data",
        "min_run_count": 2,
        "name": "time.SolverTimeCycle.time_solver",
        "number": 0,
        "param_names": [
            "cycle"
        ],
        "params": [
            [
                "'V'",
                "'W'",
                "'F'"
            ]
        ],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "setup_cache_key": "/home/dtr/Codes/emg3d-asv/benchmarks/time.py:175",
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "06ed1aabe45e0cb20a08c713b86080ea08da4dfe4d9d7955ed31b5fbc7533946",
        "warmup_time": -1
    },
    "time.SolverTimeMG.time_solver": {
        "code": "class SolverTimeMG:\n    def time_solver(self, data, semicoarsening, linerelaxation):\n        grid = data['grid']\n        model = data['model']\n        sfield = Field(grid, data['sfield'])\n        solve(grid=grid,\n              model=model,\n              sfield=sfield,\n              cycle='F',\n              sslsolver=False,\n              semicoarsening=semicoarsening,\n              linerelaxation=linerelaxation,\n              verb=VERB)\n\n    def setup_cache(self):\n        data = {}\n        grid, model, sfield = get_model('small')\n        data['grid'] = grid\n        data['model'] = model\n        data['sfield'] = sfield\n        return data",
        "min_run_count": 2,
        "name": "time.SolverTimeMG.time_solver",
        "number": 0,
        "param_names": [
            "semicoarsening",
            "linerelaxation"
        ],
        "params": [
            [
                "True",
                "False"
            ],
            [
                "True",
                "False"
            ]
        ],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "setup_cache_key": "/home/dtr/Codes/emg3d-asv/benchmarks/time.py:143",
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "4ee7d0688cda3e71c1cbfdf38e6b926ea016df6e703cb07e5ca512b97a68665e",
        "warmup_time": -1
    },
    "time.SolverTimeSSL.time_solver": {
        "code": "class SolverTimeSSL:\n    def time_solver(self, data, sslsolver):\n        grid = data['grid']\n        model = data['model']\n        sfield = Field(grid, data['sfield'])\n        solve(grid=grid,\n              model=model,\n              sfield=sfield,\n              cycle='F',\n              sslsolver=sslsolver,\n              semicoarsening=True,\n              linerelaxation=True,\n              verb=VERB)\n\n    def setup_cache(self):\n        data = {}\n        grid, model, sfield = get_model('small')\n        data['grid'] = grid\n        data['model'] = model\n        data['sfield'] = sfield\n        return data",
        "min_run_count": 2,
        "name": "time.SolverTimeSSL.time_solver",
        "number": 0,
        "param_names": [
            "sslsolver"
        ],
        "params": [
            [
                "True",
                "False"
            ]
        ],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "setup_cache_key": "/home/dtr/Codes/emg3d-asv/benchmarks/time.py:110",
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "6f404fdb50aeeac8e8b6145add1cb0df83a25a122781630eda29bea7f7304796",
        "warmup_time": -1
    },
    "version": 2
}