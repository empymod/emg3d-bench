{
    "memory.ResidualMemory.peakmem_residual": {
        "code": "class ResidualMemory:\n    def peakmem_residual(self, data, size):\n        grid = data[size]['grid']\n        model = data[size]['model']\n        if INFO > (1, 0, 0, 0):\n            sfield = Field(grid, data[size]['sfield'].field,\n                           data[size]['sfield'].frequency)\n            efield = Field(grid, data[size]['sfield'].field*0,\n                           data[size]['sfield'].frequency)\n        else:\n            sfield = Field(grid, data[size]['sfield'])\n            efield = Field(grid, data[size]['sfield']*0)\n        if INFO < (0, 17, 1, 7):\n            inp = (grid, model, sfield, efield)\n        else:\n            inp = (model, sfield, efield)\n        _ = emg3d.solver.residual(*inp)\n\n    def setup_cache(self):\n        data = {}\n        for size in self.params[0]:\n            data[size] = {}\n            grid, model, sfield = get_model(size)\n            data[size]['grid'] = grid\n            data[size]['sfield'] = sfield\n            # Needs VolumeModel from 0.9.1dev4 / d8e98c0 onwards.\n            if INFO < (0, 9, 1, 4):\n                data[size]['model'] = model\n            elif INFO < (0, 17, 1, 7):\n                data[size]['model'] = VolumeModel(grid, model, sfield)\n            else:\n                data[size]['model'] = VolumeModel(model, sfield)\n        return data",
        "name": "memory.ResidualMemory.peakmem_residual",
        "param_names": [
            "size"
        ],
        "params": [
            [
                "'small'",
                "'big'"
            ]
        ],
        "setup_cache_key": "/home/dtr/Codes/emsig/benchmarks/emg3d-asv/benchmarks/memory.py:212",
        "timeout": 60.0,
        "type": "peakmemory",
        "unit": "bytes",
        "version": "1b26a409f901597ee11823abce854d6f5968cd2a7dc4c4f34d49c0c0f9f7be5b"
    },
    "memory.SmoothingMemory.peakmem_smoothing": {
        "code": "class SmoothingMemory:\n    def peakmem_smoothing(self, data, lr_dir, size):\n        grid = data[size]['grid']\n        model = data[size]['model']\n        if INFO > (1, 0, 0, 0):\n            sfield = Field(grid, data[size]['sfield'].field,\n                           data[size]['sfield'].frequency)\n        else:\n            sfield = Field(grid, data[size]['sfield'])\n        efield = Field(grid)\n        if INFO < (0, 17, 1, 7):\n            inp1 = (grid, model, sfield, efield, 2, lr_dir)\n            inp2 = (grid, model, sfield, efield)\n        else:\n            inp1 = (model, sfield, efield, 2, lr_dir)\n            inp2 = (model, sfield, efield)\n        emg3d.solver.smoothing(*inp1)\n        _ = emg3d.solver.residual(*inp2)\n\n    def setup_cache(self):\n        data = {}\n        for size in self.params[1]:\n            data[size] = {}\n            grid, model, sfield = get_model(size)\n            data[size]['grid'] = grid\n            data[size]['sfield'] = sfield\n            # Needs VolumeModel from 0.9.1dev4 / d8e98c0 onwards.\n            if INFO < (0, 9, 1, 4):\n                data[size]['model'] = model\n            elif INFO < (0, 17, 1, 7):\n                data[size]['model'] = VolumeModel(grid, model, sfield)\n            else:\n                data[size]['model'] = VolumeModel(model, sfield)\n        return data",
        "name": "memory.SmoothingMemory.peakmem_smoothing",
        "param_names": [
            "lr_dir",
            "size"
        ],
        "params": [
            [
                "0",
                "1",
                "2",
                "3"
            ],
            [
                "'small'",
                "'big'"
            ]
        ],
        "setup_cache_key": "/home/dtr/Codes/emsig/benchmarks/emg3d-asv/benchmarks/memory.py:172",
        "timeout": 60.0,
        "type": "peakmemory",
        "unit": "bytes",
        "version": "3e4ca16b048dcf2ec227ddcc4869feac3a5a83260eec3147117ae633ea419d18"
    },
    "memory.SolverMemory.peakmem_solver": {
        "code": "class SolverMemory:\n    def peakmem_solver(self, data, sslsolver, anisotropy):\n        grid = data[anisotropy]['grid']\n    \n        if INFO > (1, 0, 0, 0):\n            sfield = Field(grid, data[anisotropy]['sfield'].field,\n                           data[anisotropy]['sfield'].frequency)\n        else:\n            sfield = Field(grid, data[anisotropy]['sfield'])\n    \n        inp = {\n            'model': data[anisotropy]['model'],\n            'sfield': sfield,\n            'cycle': 'F',\n            'sslsolver': sslsolver,\n            'semicoarsening': True,\n            'linerelaxation': True,\n            'verb': VERB\n        }\n    \n        if INFO < (0, 17, 1, 7):\n            inp['grid'] = grid\n    \n        solve(**inp)\n\n    def setup_cache(self):\n        data = {}\n        for anisotropy in self.params[1]:\n            data[anisotropy] = {}\n            grid, model, sfield = get_model('small', anisotropy)\n            data[anisotropy]['grid'] = grid\n            data[anisotropy]['model'] = model\n            data[anisotropy]['sfield'] = sfield\n        return data",
        "name": "memory.SolverMemory.peakmem_solver",
        "param_names": [
            "sslsolver",
            "anisotropy"
        ],
        "params": [
            [
                "True",
                "False"
            ],
            [
                "'iso'",
                "'vti'",
                "'tri'"
            ]
        ],
        "setup_cache_key": "/home/dtr/Codes/emsig/benchmarks/emg3d-asv/benchmarks/memory.py:127",
        "timeout": 120,
        "type": "peakmemory",
        "unit": "bytes",
        "version": "a3bf591f5b27c95946b9985e2b9e2b3a4f0126fef39e5d49ad80b9dd788626f3"
    },
    "time.ResidualTime.time_residual": {
        "code": "class ResidualTime:\n    def time_residual(self, data, size):\n        grid = data[size]['grid']\n        model = data[size]['model']\n        if INFO > (1, 0, 0, 0):\n            sfield = Field(grid, data[size]['sfield'].field,\n                           data[size]['sfield'].frequency)\n            efield = Field(grid, data[size]['sfield'].field*0,\n                           data[size]['sfield'].frequency)\n        else:\n            sfield = Field(grid, data[size]['sfield']*0)\n            efield = Field(grid, data[size]['sfield'])\n        if INFO < (0, 17, 1, 7):\n            inp = (grid, model, sfield, efield)\n        else:\n            inp = (model, sfield, efield)\n        _ = emg3d.solver.residual(*inp)\n\n    def setup_cache(self):\n        data = {}\n        for size in self.params[0]:\n            data[size] = {}\n            grid, model, sfield = get_model(size)\n            data[size]['grid'] = grid\n            data[size]['sfield'] = sfield\n            # Needs VolumeModel from 0.9.1dev4 / d8e98c0 onwards.\n            if INFO < (0, 9, 1, 4):\n                data[size]['model'] = model\n            elif INFO < (0, 17, 1, 7):\n                data[size]['model'] = VolumeModel(grid, model, sfield)\n            else:\n                data[size]['model'] = VolumeModel(model, sfield)\n        return data",
        "min_run_count": 2,
        "name": "time.ResidualTime.time_residual",
        "number": 0,
        "param_names": [
            "size"
        ],
        "params": [
            [
                "'small'",
                "'big'"
            ]
        ],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "setup_cache_key": "/home/dtr/Codes/emsig/benchmarks/emg3d-asv/benchmarks/time.py:292",
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "ace5b8ae98552c93397ddb00f8194b99ed24677a499e2b8b8b41c2397d8a82ba",
        "warmup_time": -1
    },
    "time.SmoothingTime.time_smoothing": {
        "code": "class SmoothingTime:\n    def time_smoothing(self, data, lr_dir, size):\n        grid = data[size]['grid']\n        model = data[size]['model']\n        if INFO > (1, 0, 0, 0):\n            sfield = Field(grid, data[size]['sfield'].field,\n                           data[size]['sfield'].frequency)\n        else:\n            sfield = Field(grid, data[size]['sfield'])\n        efield = Field(grid)\n        if INFO < (0, 17, 1, 7):\n            inp1 = (grid, model, sfield, efield, 2, lr_dir)\n            inp2 = (grid, model, sfield, efield)\n        else:\n            inp1 = (model, sfield, efield, 2, lr_dir)\n            inp2 = (model, sfield, efield)\n        emg3d.solver.smoothing(*inp1)\n        _ = emg3d.solver.residual(*inp2)\n\n    def setup_cache(self):\n        data = {}\n        for size in self.params[1]:\n            data[size] = {}\n            grid, model, sfield = get_model(size)\n            data[size]['grid'] = grid\n            data[size]['sfield'] = sfield\n            # Needs VolumeModel from 0.9.1dev4 / d8e98c0 onwards.\n            if INFO < (0, 9, 1, 4):\n                data[size]['model'] = model\n            elif INFO < (0, 17, 1, 7):\n                data[size]['model'] = VolumeModel(grid, model, sfield)\n            else:\n                data[size]['model'] = VolumeModel(model, sfield)\n        return data",
        "min_run_count": 2,
        "name": "time.SmoothingTime.time_smoothing",
        "number": 0,
        "param_names": [
            "lr_dir",
            "size"
        ],
        "params": [
            [
                "0",
                "1",
                "2",
                "3"
            ],
            [
                "'small'",
                "'big'"
            ]
        ],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "setup_cache_key": "/home/dtr/Codes/emsig/benchmarks/emg3d-asv/benchmarks/time.py:252",
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "aedd9d1b58cf4f92bbc092a3f43b85aacbe799e6d28411d3dc653808c663a05b",
        "warmup_time": -1
    },
    "time.SolverTimeCycle.time_solver": {
        "code": "class SolverTimeCycle:\n    def time_solver(self, data, cycle):\n        grid = data['grid']\n        if INFO > (1, 0, 0, 0):\n            sfield = Field(grid, data['sfield'].field,\n                           data['sfield'].frequency)\n        else:\n            sfield = Field(grid, data['sfield'])\n        inp = {\n            'model': data['model'],\n            'sfield': sfield,\n            'cycle': cycle,\n            'sslsolver': False,\n            'semicoarsening': True,\n            'linerelaxation': True,\n            'verb': VERB\n        }\n    \n        if INFO < (0, 17, 1, 7):\n            inp['grid'] = grid\n    \n        solve(**inp)\n\n    def setup_cache(self):\n        data = {}\n        grid, model, sfield = get_model('small')\n        data['grid'] = grid\n        data['model'] = model\n        data['sfield'] = sfield\n        return data",
        "min_run_count": 2,
        "name": "time.SolverTimeCycle.time_solver",
        "number": 0,
        "param_names": [
            "cycle"
        ],
        "params": [
            [
                "'V'",
                "'W'",
                "'F'"
            ]
        ],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "setup_cache_key": "/home/dtr/Codes/emsig/benchmarks/emg3d-asv/benchmarks/time.py:211",
        "timeout": 120,
        "type": "time",
        "unit": "seconds",
        "version": "2c6aaa836bd57cb0b8c2044e3827272b7ebc8725dd363378655986258e0270cf",
        "warmup_time": -1
    },
    "time.SolverTimeMG.time_solver": {
        "code": "class SolverTimeMG:\n    def time_solver(self, data, semicoarsening, linerelaxation):\n        grid = data['grid']\n        if INFO > (1, 0, 0, 0):\n            sfield = Field(grid, data['sfield'].field,\n                           data['sfield'].frequency)\n        else:\n            sfield = Field(grid, data['sfield'])\n        inp = {\n            'model': data['model'],\n            'sfield': sfield,\n            'cycle': 'F',\n            'sslsolver': False,\n            'semicoarsening': semicoarsening,\n            'linerelaxation': linerelaxation,\n            'verb': VERB\n        }\n    \n        if INFO < (0, 17, 1, 7):\n            inp['grid'] = grid\n    \n        solve(**inp)\n\n    def setup_cache(self):\n        data = {}\n        grid, model, sfield = get_model('small')\n        data['grid'] = grid\n        data['model'] = model\n        data['sfield'] = sfield\n        return data",
        "min_run_count": 2,
        "name": "time.SolverTimeMG.time_solver",
        "number": 0,
        "param_names": [
            "semicoarsening",
            "linerelaxation"
        ],
        "params": [
            [
                "True",
                "False"
            ],
            [
                "True",
                "False"
            ]
        ],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "setup_cache_key": "/home/dtr/Codes/emsig/benchmarks/emg3d-asv/benchmarks/time.py:168",
        "timeout": 120,
        "type": "time",
        "unit": "seconds",
        "version": "9fc0dc00e45229c00ff9fc2adb095e14f86a570a7fe4735d153f83c05ba34f50",
        "warmup_time": -1
    },
    "time.SolverTimeSSL.time_solver": {
        "code": "class SolverTimeSSL:\n    def time_solver(self, data, sslsolver):\n        grid = data['grid']\n        if INFO > (1, 0, 0, 0):\n            sfield = Field(grid, data['sfield'].field,\n                           data['sfield'].frequency)\n        else:\n            sfield = Field(grid, data['sfield'])\n        inp = {\n            'model': data['model'],\n            'sfield': sfield,\n            'cycle': 'F',\n            'sslsolver': sslsolver,\n            'semicoarsening': True,\n            'linerelaxation': True,\n            'verb': VERB\n        }\n    \n        if INFO < (0, 17, 1, 7):\n            inp['grid'] = data['grid']\n    \n        solve(**inp)\n\n    def setup_cache(self):\n        data = {}\n        grid, model, sfield = get_model('small')\n        data['grid'] = grid\n        data['model'] = model\n        data['sfield'] = sfield\n        return data",
        "min_run_count": 2,
        "name": "time.SolverTimeSSL.time_solver",
        "number": 0,
        "param_names": [
            "sslsolver"
        ],
        "params": [
            [
                "True",
                "False"
            ]
        ],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "setup_cache_key": "/home/dtr/Codes/emsig/benchmarks/emg3d-asv/benchmarks/time.py:124",
        "timeout": 120,
        "type": "time",
        "unit": "seconds",
        "version": "29e05fc4f380118e3221d4425b07cd569b0204af3401dee976ffc34c060b54fd",
        "warmup_time": -1
    },
    "version": 2
}